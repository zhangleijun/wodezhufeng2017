git / gitHub

1、GIT
  项目源代码的版本控制器(代码管理工具),方便团队协作开发

2、gitHub
   -> https://github.com/
   -> 我们所熟知的JS类库框架的项目源代码在gitHub上都有托管
   -> 全世界权威知名，如果你的gitHub账号的粉丝很多，那么在全世界你都可以玩的很HAPPY
   -> 可以基于gitHub免费做博客 或者 免费发布自己的网站...

   Coding
   -> https://coding.net/

   =========

3、git

  第一次使用GIT，我们先在本地把邮箱和用户名配置一下(配置的用户名和邮箱可以随便设置，建议大家和gitHub的用户名邮箱保持一致)
    $ git config --global user.name "你的github用户名"
    $ git config --global user.email "你的github邮箱"


  本地简历一个GIT仓库，并且和远程能够建立连接
  =======
  建立本地的GIT仓库
    $ git init  =>在当前的项目文件夹中生成一个.git文件夹(不能删除,删除后就不是本地仓库了)

  让本地仓库和远程仓库之间建立连接的通道
    $ git remote add [名字] [远程仓库的地址]

      [名字]：给传输通道起个名字，一般我们都叫做 origin
      [远程仓库地址]：gitHub创建仓库完成后，会生成一个远程仓库地址(例如：https://github.com/zhouxiaotian/myFirstProject.git 注意是HTTPS开头的)，通过这个地址可以找到远程的仓库

    $ git remote -v 查看连接情况
    $ git remote rm [名字] 删除连接的通道
    $ git remote update [名字] 更新连接通道
  ========
  $ git clone [远程仓库地址]
   -> 在本地创建了一个GIT仓库
   -> 让本地仓库和远程仓库保持了连接
   -> 把远程仓库中的原代码拉取到了本地

  $ git pull origin master  通过ORIGIN这个通道和远程仓库连接，并且把MASTER这个主分支中的原代码更新到本地仓库中(PULL ->拉取)


4、在本地仓库中，把修改完成的代码提交到远程仓库上

  本地GIT仓库分为三个区域：
    ->工作区:开发代码
    ->暂存区
    ->历史区:记录了各个版本,我们可以在这个区域中查看每一时段的代码更新,也可以把代码回滚到某一个时段

    工作区 -> 暂存区（临时存储） -> 历史区（生成版本） ->（需要回滚）直接从历史区把某一个版本代码覆盖工作区的代码

    如果需要推送到远程仓库，我们把本地历史区的内容推送到远程仓库即可

  .gitignore ：这个文件中存放的是所有上传远程服务器需要忽略的文件

  $ git add [某一个文件:路径要对]  把工作区某一个文件上传到暂存区
  $ git add . 或者 $ git add -A  把工作区所有修改的文件上传到暂存区

  $ git commit -m'[本次提交的描述]'  把暂存区的内容上传到历史区生成一个项目版本

  $ git status 查看当前本地仓库文件的状态
   ->红色：当前文件还未增加到暂存区
   ->绿色：当前文件还未上传到历史区

  $ git push origin master  把本地仓库历史区中的内容(包含提交的记录)都有更新到远程仓库(ORIGIN对应的远程仓库)的MASTER主分支下  =>此处应该叫做同步,这样比提交叫法准确,因为在每一PUSH后,不仅仅是代码推送到远程仓库中,而且本地新增加的项目版本记录也都同步到了远程仓库上


======================================
Mark Down：
  技术人员编写技术文档的一个新神器(一种新的语法),使用MD编写技术文档,不需要考虑样式和HTML结构等

编写MD的开发工具:
  1、WS中安装MD插件 (不推荐)

  2、马克飞象 (推荐)
   专门为印象笔记打造的一款MD的开发工具，我们可以使用印象笔记的账号登录马克飞象，在马克中编辑的文件会同步到印象笔记中
   https://maxiang.io/ (网页版的)
   https://pan.baidu.com/s/1sl7tx29#list/path=%2F (下载桌面版的)

















